# Generated by Django 3.1.2 on 2020-12-07 19:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('vhcm', '0004_auto_20201202_0954'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatState',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='sesion id')),
                ('sent_from', models.SmallIntegerField(choices=[(1, 'User'), (2, 'Bot'), (3, 'System')])),
                ('user_question', models.TextField(null=True, verbose_name='user asked question')),
                ('message', models.TextField(null=True, verbose_name='chat message')),
                ('recorded_time', models.DateTimeField(auto_now_add=True, verbose_name='message send time')),
                ('predicted_intent', models.TextField(null=True, verbose_name='predicted intent name')),
                ('question_type', models.CharField(max_length=20, null=True, verbose_name='predicted question types')),
                ('action', models.SmallIntegerField(choices=[(0, 'initial'), (1, 'answer'), (2, 'await'), (3, 'ok'), (4, 'ng')], null=True, verbose_name='chatbot reaction to user')),
                ('reportable_bot_states', models.TextField(null=True, verbose_name='indexes of reportable bot states')),
                ('system_state_idx', models.SmallIntegerField(null=True, verbose_name='index of current system process state')),
                ('system_processing_type', models.SmallIntegerField(null=True, verbose_name='system processing type')),
                ('system_processing_report_type', models.SmallIntegerField(null=True, verbose_name='system processing report type')),
                ('system_input_data_type', models.TextField(null=True, verbose_name='current user input data type')),
                ('system_tmp_report_data', models.TextField(null=True, verbose_name='temp user report data')),
                ('system_tmp_report_note', models.TextField(null=True, verbose_name='temp user report note')),
                ('system_tmp_report_bot_state', models.SmallIntegerField(null=True, verbose_name='temp bot state being reported')),
            ],
            options={
                'db_table': 'chat_state',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeDataTrainDataLink',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('edit_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.knowledgedata')),
            ],
            options={
                'db_table': 'knowledge_data_train_data_link',
            },
        ),
        migrations.RemoveField(
            model_name='traindata',
            name='include_data',
        ),
        migrations.DeleteModel(
            name='Message',
        ),
        migrations.AddField(
            model_name='knowledgedatatraindatalink',
            name='train_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.traindata'),
        ),
        migrations.AddField(
            model_name='chatstate',
            name='data_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.traindata', verbose_name='chatbot data version'),
        ),
        migrations.AddField(
            model_name='chatstate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='chat user id'),
        ),
        migrations.AddField(
            model_name='knowledgedata',
            name='train_data',
            field=models.ManyToManyField(through='vhcm.KnowledgeDataTrainDataLink', to='vhcm.TrainData'),
        ),
        migrations.AlterUniqueTogether(
            name='knowledgedatatraindatalink',
            unique_together={('knowledge_data', 'train_data')},
        ),
    ]
