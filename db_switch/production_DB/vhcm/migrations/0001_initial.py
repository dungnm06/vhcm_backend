# Generated by Django 3.1.2 on 2020-11-20 16:15

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import vhcm.biz.validation.string


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('user_id', models.AutoField(db_index=True, primary_key=True, serialize=False, verbose_name='user id')),
                ('username', models.CharField(db_index=True, max_length=20, unique=True, verbose_name='username')),
                ('fullname', models.CharField(db_index=True, default='', max_length=60, verbose_name='fullname')),
                ('gender', models.SmallIntegerField(choices=[(0, 'Men'), (1, 'Women'), (2, 'Unknown')], default=2, verbose_name='gender')),
                ('nationality', models.CharField(default='Vietnam', max_length=60, verbose_name='nationality')),
                ('place_of_birth', models.CharField(default='', max_length=255, verbose_name='place of birth')),
                ('date_of_birth', models.DateField(default=datetime.date.today, verbose_name='date of birth')),
                ('address', models.TextField(default='', verbose_name='address')),
                ('id_number', models.CharField(default='', max_length=12, unique=True, validators=[vhcm.biz.validation.string.only_digit], verbose_name='id_number')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='account create time')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='account modify time')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=60, null=True, verbose_name='email address')),
                ('avatar', models.BinaryField(blank=True, null=True, verbose_name='user display avatar')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('admin', models.BooleanField(default=False)),
                ('first_login', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='BlacklistedToken',
            fields=[
                ('token', models.TextField(primary_key=True, serialize=False, verbose_name='blacklisted access token')),
                ('expire', models.DateTimeField(db_index=True, verbose_name='expire time')),
            ],
            options={
                'db_table': 'blacklisted_token',
            },
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False, verbose_name='log id')),
                ('log', models.BinaryField(blank=True, verbose_name='chat history')),
                ('session_start', models.DateTimeField(verbose_name='chat session start time')),
                ('session_end', models.DateTimeField(auto_now_add=True, verbose_name='chat session end time')),
            ],
            options={
                'db_table': 'chat_history',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeData',
            fields=[
                ('knowledge_data_id', models.AutoField(primary_key=True, serialize=False)),
                ('intent', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='intent')),
                ('intent_fullname', models.CharField(db_index=True, max_length=255, verbose_name='intent full name')),
                ('base_response', models.TextField(verbose_name='base response')),
                ('status', models.SmallIntegerField(choices=[(0, 'Available'), (1, 'Processing'), (2, 'Done'), (3, 'Disable')], default=1, verbose_name='status')),
                ('raw_data', models.TextField(verbose_name='raw text data')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='modified date')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kd_create_user_id', to=settings.AUTH_USER_MODEL, verbose_name='create user')),
                ('edit_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kd_edit_user_id', to=settings.AUTH_USER_MODEL, verbose_name='edit user')),
            ],
            options={
                'db_table': 'knowledge_data',
            },
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('synonym_id', models.AutoField(primary_key=True, serialize=False, verbose_name='synonym id')),
                ('meaning', models.CharField(max_length=50, verbose_name='synonym group main meaning')),
                ('words', models.TextField(verbose_name='words in synonym group')),
            ],
            options={
                'db_table': 'synonyms',
            },
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('setting_id', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='report id')),
                ('setting_name', models.CharField(max_length=100, verbose_name='setting name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='setting description')),
                ('type', models.IntegerField(choices=[(1, 'System'), (2, 'NLP')], verbose_name='setting type')),
                ('value', models.TextField(blank=True, null=True, verbose_name='value')),
                ('default', models.TextField(verbose_name='default value')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='setting created time')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='setting modified time')),
            ],
            options={
                'db_table': 'system_settings',
            },
        ),
        migrations.CreateModel(
            name='TrainData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=100, verbose_name='train data file name')),
                ('description', models.TextField(verbose_name='Description')),
                ('include_data', models.TextField(null=True, verbose_name='Excluded knowledge datas')),
                ('type', models.IntegerField(choices=[(1, 'Available'), (2, 'Disable'), (3, 'Deleted')], verbose_name='Available status')),
                ('delete_reason', models.TextField(null=True, verbose_name='Description')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='file created time')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='details modified time')),
            ],
            options={
                'db_table': 'train_data',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='subject id')),
                ('type', models.CharField(max_length=5, verbose_name='subject type')),
                ('subject_data', models.TextField(verbose_name='subject in the knowledge datas raw sentence')),
                ('verbs', models.TextField(null=True, verbose_name='verbs belong to the subject')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.knowledgedata')),
            ],
            options={
                'db_table': 'knowledge_data_subjects',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.SmallIntegerField(choices=[(1, 'accept'), (2, 'reject'), (3, 'draft')], db_index=True, verbose_name='review action types')),
                ('review_detail', models.TextField(verbose_name='review detail')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='modified date')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_kd', to='vhcm.knowledgedata')),
                ('review_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_user', to=settings.AUTH_USER_MODEL, verbose_name='review user')),
            ],
            options={
                'db_table': 'knowledge_data_review',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False, verbose_name='report id')),
                ('report_data', models.TextField(null=True, verbose_name='report data')),
                ('type', models.SmallIntegerField(verbose_name='report type')),
                ('status', models.SmallIntegerField(verbose_name='status')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='report recorded time')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.chathistory', verbose_name='chat history id')),
            ],
            options={
                'db_table': 'report',
            },
        ),
        migrations.CreateModel(
            name='RefercenceDocument',
            fields=[
                ('reference_document_id', models.AutoField(primary_key=True, serialize=False, verbose_name='reference document id')),
                ('reference_name', models.CharField(db_index=True, default='', max_length=100, verbose_name='reference name')),
                ('link', models.TextField(blank=True, null=True, verbose_name='reference urls')),
                ('cover', models.BinaryField(blank=True, null=True, verbose_name='document cover')),
                ('author', models.TextField(db_index=True, default='', verbose_name='document author')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='modified date')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rd_create_user_id', to=settings.AUTH_USER_MODEL, verbose_name='create user')),
                ('last_edit_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rd_last_edit_user_id', to=settings.AUTH_USER_MODEL, verbose_name='last edit user')),
            ],
            options={
                'db_table': 'reference_document',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='question id')),
                ('question', models.TextField(verbose_name='question')),
                ('type', models.CharField(max_length=13, verbose_name='question type')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.knowledgedata')),
            ],
            options={
                'db_table': 'knowledge_data_question',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('chat_session_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='sesion id')),
                ('sent_from', models.SmallIntegerField(choices=[(1, 'User'), (2, 'Bot')])),
                ('message', models.TextField(null=True, verbose_name='chat message')),
                ('intent', models.TextField(null=True, verbose_name='predicted intent name')),
                ('question_type', models.CharField(max_length=20, null=True, verbose_name='predicted question types')),
                ('action', models.SmallIntegerField(choices=[(0, 'initial'), (1, 'answer'), (2, 'await'), (3, 'ok'), (4, 'ng')], null=True, verbose_name='chatbot reaction to user')),
                ('recorded_time', models.DateTimeField(auto_now_add=True, verbose_name='message send time')),
                ('data_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.traindata', verbose_name='chatbot data version')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='chat user id')),
            ],
            options={
                'db_table': 'chat_messages',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeDataSynonymLink',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('word', models.TextField(verbose_name='word thats synonym dict linking with')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.knowledgedata')),
                ('synonym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.synonym')),
            ],
            options={
                'db_table': 'knowledge_data_synonym_link',
                'unique_together': {('knowledge_data', 'synonym', 'word')},
            },
        ),
        migrations.CreateModel(
            name='KnowledgeDataRefercenceDocumentLink',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('page', models.SmallIntegerField(blank=True, default=None, null=True, verbose_name='document page number')),
                ('extra_info', models.TextField(null=True, verbose_name='extra info on reference document')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.knowledgedata')),
                ('reference_document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.refercencedocument')),
            ],
            options={
                'db_table': 'knowledge_data_reference_document_link',
            },
        ),
        migrations.AddField(
            model_name='knowledgedata',
            name='references',
            field=models.ManyToManyField(through='vhcm.KnowledgeDataRefercenceDocumentLink', to='vhcm.RefercenceDocument'),
        ),
        migrations.AddField(
            model_name='knowledgedata',
            name='synonym',
            field=models.ManyToManyField(through='vhcm.KnowledgeDataSynonymLink', to='vhcm.Synonym'),
        ),
        migrations.CreateModel(
            name='GeneratedQuestion',
            fields=[
                ('generated_question_id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='generated question id')),
                ('generated_question', models.TextField(verbose_name='generated question')),
                ('accept_status', models.BooleanField(verbose_name='accepted status')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.question')),
            ],
            options={
                'db_table': 'knowledge_data_generated_question',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField(verbose_name='comment text')),
                ('status', models.SmallIntegerField(choices=[(1, 'viewable'), (2, 'deleted')], verbose_name='comment viewable status')),
                ('edited', models.BooleanField(default=False, verbose_name='edited status')),
                ('cdate', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('mdate', models.DateTimeField(auto_now=True, verbose_name='modified date')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_kd', to='vhcm.knowledgedata', verbose_name='knowledge data the comment belong to')),
                ('reply_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_mentioned_comment', to='vhcm.comment', verbose_name='mentioned comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_user', to=settings.AUTH_USER_MODEL, verbose_name='comment user')),
            ],
            options={
                'db_table': 'knowledge_data_comment',
            },
        ),
        migrations.AddField(
            model_name='chathistory',
            name='data_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.traindata', verbose_name='chatbot data version'),
        ),
        migrations.AddField(
            model_name='chathistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='chat user id'),
        ),
        migrations.CreateModel(
            name='ResponseData',
            fields=[
                ('response_data_id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='response data id')),
                ('type', models.SmallIntegerField(choices=[(1, 'what'), (2, 'when'), (3, 'where'), (4, 'who'), (5, 'why'), (6, 'how'), (7, 'yesno')], verbose_name='type of question')),
                ('answer', models.TextField(verbose_name='answer string')),
                ('knowledge_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vhcm.knowledgedata')),
            ],
            options={
                'db_table': 'knowledge_data_response_data',
                'unique_together': {('knowledge_data', 'type')},
            },
        ),
    ]
